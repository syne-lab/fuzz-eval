#include "utils/includes.h"
#ifndef CONFIG_NATIVE_WINDOWS
#include <syslog.h>
#include <grp.h>
#endif /* CONFIG_NATIVE_WINDOWS */

#include "utils/common.h"
#include "utils/eloop.h"
#include "utils/uuid.h"
#include "crypto/random.h"
#include "crypto/tls.h"
#include "common/version.h"
#include "common/dpp.h"
#include "drivers/driver.h"
#include "eap_server/eap.h"
#include "eap_server/tncs.h"
#include "ap/hostapd.h"
#include "ap/ap_config.h"
#include "ap/ap_drv_ops.h"
#include "ap/dpp_hostapd.h"
#include "fst/fst.h"
#include "config_file.h"
#include "eap_register.h"
#include "ctrl_iface.h"
#include "tls/x509v3.h"

int main(int argc, char *argv[])
{

u8 ca_der[] = {
  0x30, 0x82, 0x03, 0x04, 0x30, 0x82, 0x01, 0xec, 0x02, 0x09, 0x00, 0xd8,
  0xa3, 0x59, 0xd1, 0xfd, 0x1b, 0x18, 0x49, 0x30, 0x0d, 0x06, 0x09, 0x2a,
  0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x45,
  0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41,
  0x55, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a,
  0x53, 0x6f, 0x6d, 0x65, 0x2d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x31, 0x21,
  0x30, 0x1f, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x18, 0x49, 0x6e, 0x74,
  0x65, 0x72, 0x6e, 0x65, 0x74, 0x20, 0x57, 0x69, 0x64, 0x67, 0x69, 0x74,
  0x73, 0x20, 0x50, 0x74, 0x79, 0x20, 0x4c, 0x74, 0x64, 0x30, 0x1e, 0x17,
  0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x38, 0x30, 0x37, 0x32, 0x33, 0x33,
  0x30, 0x5a, 0x17, 0x0d, 0x32, 0x31, 0x31, 0x30, 0x31, 0x38, 0x30, 0x37,
  0x32, 0x33, 0x33, 0x30, 0x5a, 0x30, 0x45, 0x31, 0x0b, 0x30, 0x09, 0x06,
  0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x55, 0x31, 0x13, 0x30, 0x11,
  0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x2d,
  0x53, 0x74, 0x61, 0x74, 0x65, 0x31, 0x21, 0x30, 0x1f, 0x06, 0x03, 0x55,
  0x04, 0x0a, 0x0c, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
  0x20, 0x57, 0x69, 0x64, 0x67, 0x69, 0x74, 0x73, 0x20, 0x50, 0x74, 0x79,
  0x20, 0x4c, 0x74, 0x64, 0x30, 0x82, 0x01, 0x20, 0x30, 0x0d, 0x06, 0x09,
  0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03,
  0x82, 0x01, 0x0d, 0x00, 0x30, 0x82, 0x01, 0x08, 0x02, 0x82, 0x01, 0x01,
  0x00, 0xe9, 0x32, 0xac, 0x92, 0x25, 0x2f, 0x58, 0x5b, 0x3a, 0x80, 0xa4,
  0xdd, 0x76, 0xa8, 0x97, 0xc8, 0xb7, 0x65, 0x29, 0x52, 0xfe, 0x78, 0x8f,
  0x6e, 0xc8, 0xdd, 0x64, 0x05, 0x87, 0xa1, 0xee, 0x56, 0x47, 0x67, 0x0a,
  0x8a, 0xd4, 0xc2, 0xbe, 0x0f, 0x9f, 0xa6, 0xe4, 0x9c, 0x60, 0x5a, 0xdf,
  0x77, 0xb5, 0x17, 0x42, 0x30, 0xaf, 0x7b, 0xd5, 0x0e, 0x5d, 0x6d, 0x6d,
  0x6d, 0x28, 0xcc, 0xf0, 0xa8, 0x86, 0xa5, 0x14, 0xcc, 0x72, 0xe5, 0x1d,
  0x20, 0x9c, 0xc7, 0x72, 0xa5, 0x2e, 0xf4, 0x19, 0xf6, 0xa9, 0x53, 0xf3,
  0x13, 0x59, 0x29, 0x58, 0x8e, 0xbe, 0x9b, 0x35, 0x1f, 0xca, 0x61, 0xce,
  0xd7, 0x8f, 0x34, 0x6f, 0xe0, 0x0d, 0xbb, 0x63, 0x06, 0xe5, 0xc2, 0xa4,
  0xc6, 0xdf, 0xc3, 0x77, 0x9a, 0xf8, 0x5a, 0xb4, 0x17, 0x37, 0x1c, 0xf3,
  0x4d, 0x83, 0x87, 0xb9, 0xb3, 0x0a, 0xe4, 0x6d, 0x7a, 0x5f, 0xf5, 0xa6,
  0x55, 0xb8, 0xd8, 0x45, 0x5f, 0x1b, 0x94, 0xae, 0x73, 0x69, 0x89, 0xd6,
  0x0a, 0x6f, 0x2f, 0xd5, 0xca, 0xdb, 0xff, 0xbd, 0x50, 0x4c, 0x5a, 0x75,
  0x6a, 0x2e, 0x6b, 0xb5, 0xce, 0xcc, 0x13, 0xbc, 0xa7, 0x50, 0x3f, 0x6d,
  0xf8, 0xb5, 0x2a, 0xce, 0x5c, 0x41, 0x09, 0x97, 0xe9, 0x88, 0x09, 0xdb,
  0x4d, 0xc3, 0x0d, 0x94, 0x3d, 0xe4, 0xe8, 0x12, 0xa4, 0x75, 0x53, 0xdc,
  0xe5, 0x48, 0x44, 0xa7, 0x8e, 0x36, 0x40, 0x1d, 0x13, 0xf7, 0x7d, 0xc6,
  0x50, 0x61, 0x9f, 0xed, 0x88, 0xd8, 0xb3, 0x92, 0x6e, 0x3d, 0x8e, 0x31,
  0x9c, 0x80, 0xc7, 0x44, 0x77, 0x9a, 0xc5, 0xd6, 0xab, 0xe2, 0x52, 0x89,
  0x69, 0x50, 0x91, 0x74, 0x76, 0xec, 0xe5, 0xe8, 0xfc, 0x27, 0xd5, 0xf0,
  0x53, 0xd6, 0x01, 0x8d, 0x91, 0xb5, 0x02, 0xc4, 0x78, 0x75, 0x58, 0xa0,
  0x02, 0xb9, 0x28, 0x3d, 0xa7, 0x02, 0x01, 0x03, 0x30, 0x0d, 0x06, 0x09,
  0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03,
  0x82, 0x01, 0x01, 0x00, 0x60, 0xf5, 0xe8, 0x7f, 0x95, 0x36, 0xdb, 0xbf,
  0x89, 0xd2, 0x6c, 0x9d, 0x65, 0x03, 0x41, 0x3f, 0x3a, 0xe1, 0x71, 0x35,
  0x42, 0xa9, 0x44, 0xe4, 0xd3, 0xcb, 0xd0, 0x1b, 0xcd, 0x03, 0x3b, 0xdd,
  0xaf, 0x1c, 0xf8, 0xf4, 0x43, 0x40, 0x83, 0x87, 0xab, 0x04, 0x19, 0xb9,
  0x12, 0x40, 0xc6, 0x70, 0x25, 0x05, 0x44, 0x38, 0x8e, 0x90, 0x81, 0x1e,
  0x73, 0x56, 0x78, 0xfe, 0x72, 0xc9, 0x85, 0x89, 0x85, 0xb2, 0xf5, 0x71,
  0x95, 0xdd, 0xcc, 0x39, 0xfb, 0x72, 0xf0, 0xdf, 0xa4, 0x2a, 0x3e, 0x86,
  0xc5, 0x78, 0x3c, 0xcd, 0x5f, 0x12, 0xd3, 0x0a, 0xf3, 0x65, 0xe4, 0xaa,
  0xfb, 0xa3, 0x31, 0xa6, 0x8d, 0x0e, 0xef, 0x0c, 0x8b, 0x7e, 0xd1, 0x09,
  0xb1, 0xb3, 0x36, 0x9e, 0xf8, 0x80, 0x05, 0xe1, 0xad, 0x29, 0xe1, 0x91,
  0x09, 0x9e, 0x13, 0x6c, 0x0c, 0xa8, 0x59, 0x4f, 0xeb, 0x7f, 0xa2, 0x5b,
  0x7b, 0xb5, 0x4e, 0x98, 0xdb, 0xdd, 0x89, 0xa1, 0xb1, 0xa2, 0xd6, 0x65,
  0x6f, 0x7f, 0xb4, 0xe8, 0xdb, 0x9e, 0x9c, 0xe4, 0x9f, 0x53, 0xef, 0xde,
  0xed, 0xaa, 0x4c, 0x8e, 0x85, 0x30, 0x27, 0x65, 0x1f, 0xe0, 0x12, 0xad,
  0x6f, 0xf3, 0x6e, 0x1e, 0x5d, 0xd0, 0x1c, 0x1d, 0x03, 0x17, 0x17, 0x2a,
  0x1d, 0xc0, 0x2f, 0xc1, 0x0c, 0x5c, 0x83, 0x5b, 0xa2, 0xc4, 0xe0, 0xb9,
  0x08, 0x44, 0xaf, 0xdf, 0xf2, 0x3d, 0x63, 0xac, 0xfd, 0x7d, 0x8f, 0xec,
  0x1a, 0xa4, 0x9a, 0x4a, 0xde, 0x6b, 0x4d, 0x36, 0x03, 0x4c, 0x71, 0x01,
  0xb1, 0x2c, 0xb7, 0xd8, 0x4a, 0x78, 0xeb, 0xed, 0x48, 0x2d, 0x8c, 0xc7,
  0xa6, 0x2a, 0x0e, 0x85, 0xef, 0x6e, 0x8d, 0xec, 0x1c, 0x3c, 0x0c, 0xb6,
  0x99, 0xd9, 0xe6, 0x52, 0x30, 0x03, 0x0c, 0xf2, 0x69, 0xd3, 0xed, 0x17,
  0x54, 0x78, 0x05, 0x2f, 0xe8, 0x97, 0x35, 0x64
};
unsigned int ca_der_len = 776;
u8 ca_sig[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0xcb, 0xfd, 0x4a, 0x7a, 0xdc, 0x79, 0x05, 0x58, 0x3d, 0x79, 0x20, 0xd7, 0x16, 0x5d, 0xdd, 0x67, 0x64, 0x62, 0x3e, 0x80, 0xef, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x2c, 0x7a, 0x5d, 0x78, 0xa4, 0x33, 0x69, 0x9e, 0xba, 0x9d, 0x54, 0x75, 0x02, 0x5c, 0x82, 0xf5, 0x6c, 0xab, 0x23, 0xca, 0x39
};
unsigned int ca_sig_len = 256;

	/* necessary parameters */

	struct x509_certificate *issuerCert = x509_certificate_parse(ca_der, ca_der_len);
	
	u8 *signatureVal = ca_sig;
	size_t signatureValLen = ca_sig_len;

	u8 msgTBS[] = "hello world!";
	u8 *signedData = msgTBS;
	size_t signedDataLen = sizeof(msgTBS) - 1;

	/* OID for SHA-1 with RSA Encryption */
	struct x509_algorithm_identifier sigAlgo;
	sigAlgo.oid.len = 7;
	sigAlgo.oid.oid[0] = 1;
	sigAlgo.oid.oid[1] = 2;
	sigAlgo.oid.oid[2] = 840;
	sigAlgo.oid.oid[3] = 113549;
	sigAlgo.oid.oid[4] = 1;
	sigAlgo.oid.oid[5] = 1;
	sigAlgo.oid.oid[6] = 5;

	int ret = x509_check_signature(
		issuerCert, &sigAlgo,
		signatureVal, signatureValLen,
		signedData, signedDataLen);

	printf("ret = %d\n", ret);


	x509_certificate_free(issuerCert);

	return 0;
}
